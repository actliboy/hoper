def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'kotlin-parcelize'

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    ndkVersion '21.3.6528147'
    compileSdkVersion 31 //30没源码

    sourceSets {
        main {
            java.srcDirs += 'src/main/kotlin'
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "xyz.hoper.dart"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            v2SigningEnabled true
        }
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            minifyEnabled true //安卓代码混淆的坑，不是JNI找不到类，就是注册不了
            shrinkResources true
            proguardFiles 'proguard-rules.pro'
            ndk {
                abiFilters "arm64-v8a" //兼容第三方32位so库，可恶
            }
        }
        debug{
            ndk {
                //这里要加上，否则debug包会出问题,后面三个为可选，x86建议加上不然部分模拟器回报错
                abiFilters "armeabi-v7a","arm64-v8a", "x86_64"
            }
        }
    }

    packagingOptions {
        // pickFirsts:当出现重复文件，会使用第一个匹配的文件打包进入apk
        pickFirst 'lib/armeabi-v7a/libluajapi.so'
    }

    externalNativeBuild {
    }

}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9")
    implementation fileTree(dir: 'libs', include: ['*.so','*.jar'])

    implementation 'androidx.appcompat:appcompat:1.3.1' //引入包的版本需在1.1.0以上
    implementation 'com.google.android.material:material:1.2.1'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    lua_package_path "/home/jyb/ghoper/zther/lhoper/lualib/?.lua;;"; #lua 模块
	lua_package_cpath "/home/jyb/ghoper/zther/lhoper/clib/?.so;;"; #c模块
	init_by_lua_file /home/jyb/ghoper/zther/lhoper/init/init.lua;

    fastcgi_intercept_errors on;

    server {
        listen       80;
        server_name  localhost;
        rewrite ^(.*) https://$host$request_uri permanent;
        # charset koi8-r;

        # access_log  logs/host.access.log  main;

#         location /api {
#             proxy_pass  http://127.0.0.1:8000;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Real-PORT $remote_port;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         }
#
#        location / {
#             rewrite ^(.*) https://$host$request_uri permanent;
#        }

        # error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html

        # error_page   500 502 503 504  /50x.html;
        # location = /50x.html {
        #    root   html;
        # }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80

        # location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        # }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000

        # location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        # }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one

        # location ~ /\.ht {
        #    deny  all;
        # }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    #upstream backend{
    #    server 0.0.0.0;
    #    balancer_by_lua_block {
    #        local balancer = require "ngx.balancer"
    #        local host = {"192.168.1.111", "192.168.1.112"}
    #        local backend = ""
    #        local port = ngx.var.server_port
    #        local remote_ip = ngx.var.remote_addr
    #        local key = remote_ip..port
    #        local hash = ngx.crc32_long(key);
    #        hash = (hash % 2) + 1
    #        backend = host[hash]
    #        ngx.log(ngx.DEBUG, "ip_hash=", ngx.var.remote_addr, " hash=", hash, " up=", backend, ":", port)
    #        local ok, err = balancer.set_current_peer(backend, port)
    #        if not ok then
    #            ngx.log(ngx.ERR, "failed to set the current peer: ", err)
    #            return ngx.exit(500)
    #        end
    #        ngx.log(ngx.DEBUG, "current peer ", backend, ":", port)
    #    }
    #}

    # HTTPS server
    #
    server {
        #开启http2只需要nginx开启
        listen       443 ssl http2;
        server_name  localhost;

        ssl_certificate      /home/jyb/ghoper/config/tls/cert.pem;
        ssl_certificate_key  /home/jyb/ghoper/config/tls/cert.key;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        error_page  404 403 500 502 503 504  /error;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
            root  /home/jyb/ghoper/static/;
        }

        location /api {
		    proxy_pass  http://127.0.0.1:8000;
            proxy_set_header Host $host;
		    proxy_set_header X-Real-IP $remote_addr;
		    proxy_set_header X-Real-PORT $remote_port;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /gin {
            proxy_pass  http://127.0.0.1:8001;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Real-PORT $remote_port;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /actix {
            proxy_pass  http://127.0.0.1:8002;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Real-PORT $remote_port;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /spring {
        	#解决跨域
        	if ($request_method = 'OPTIONS') {
					add_header 'Access-Control-Allow-Origin' '$http_origin';# http_origin 代表请求的origin
					add_header 'Access-Control-Allow-Credentials' 'true'; #用于有cookie需要跨域，如果没cookie可以不用
					add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
					#
					# Custom headers and headers various browsers *should* be OK with but aren't
					#
					add_header 'Access-Control-Allow-Headers' 
                    'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
					#
					# Tell client that this pre-flight info is valid for 20 days
					#
					add_header 'Access-Control-Max-Age' 1728000;
					add_header 'Content-Type' 'text/plain charset=UTF-8';
					add_header 'Content-Length' 0;
					return 200;
	        }
            proxy_pass  http://hoper.xyz:8003;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Real-PORT $remote_port;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /ws {
	        proxy_pass http://127.0.0.1:8000;
			proxy_http_version 1.1;
		    proxy_set_header Upgrade $http_upgrade;
		    proxy_set_header Connection "Upgrade";
		    proxy_set_header Host  $http_host;
        }

        location ~^/lua/([-_a-zA-Z0-9/]+) {
            error_page  404 403 500 502 503 504  error;
		    default_type 'text/html';
            #lua_code_cache off;
            set $lua_path $1;
            set $module '';
            access_by_lua_file /home/jyb/ghoper/zther/lhoper/access/access.lua;
            content_by_lua_file /home/jyb/ghoper/zther/lhoper/$lua_path.lua;
        }

        location /static/ {
		    root  /home/jyb/ghoper/;
		}

        location / {
		    root  /home/jyb/ghoper/static/;
            try_files $uri @node;
		}

        location @node {
            proxy_pass  http://127.0.0.1:3000;
            proxy_set_header Host $host;
 			proxy_set_header X-Real-IP $remote_addr;
		    proxy_set_header X-Real-PORT $remote_port;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        #神奇vue
        location /vue {
            #所有路径进入index
            root   F:/code/dist;
            try_files $uri $uri/ /index.html;
            index index.html;
         }

    }

    server {
            listen 443;
            server_name liov.xyz;
            default_type text/html;
			content_by_lua '
			ngx.say("<p>serve_name</p>")
			';

   }

}

include tcp.conf;

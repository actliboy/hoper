kind: pipeline
type: docker
name: go
workspace:          #基于gopath构建的需要加上
  base: /go
  path: .
steps:
  - name: build
    image: golang:latest
    #一个golang插件，其实就是一个go命令，很多的插件都是以docker image的形式存在的，每一个插件一般都只会处理一个问题，此处的就是编译go包
    commands:
      - go build -o hoper
  - name: 构建镜像
    image: plugins/docker   #docker插件，有docker命令有的所有功能
    volumes:
      - name: docker
        path: /var/run/docker.sock
    settings:
      username:
        from_secret: repo_user
        #上面配置drone项目中设置的secret就是在此处调用的
      password:
        from_secret: repo_pass
        #上面配置drone项目中设置的secret就是在此处调用的
      repo: reg.miz.so/sanger/go-example
      # 你的仓库和项目的地址
      registry: reg.miz.so/sanger
      # 你的仓库的地址
      tags: ${DRONE_BUILD_NUMBER}
      #这一个drone的环境变量，表示本次的构建号
  - name: kubernetes部署
    image: guoxudongdocker/kubectl:v1.14.1
    # kubectl插件，用于执行kubectl命令
    volumes:
      #本地卷，用于挂载本地的k8s认证文件到容器中
      - name: kube
        path: /root/.kube
    commands:     #容器中执行命令
      - sed -i "s/#Tag/${DRONE_BUILD_NUMBER}/g" k8s_yaml/deployment.yaml
      - kubectl apply -f k8s_yaml/
  - name: 钉钉通知
    image: lddsb/drone-dingtalk-message         #钉钉插件，通过构建结果
    settings:
      token:
        from_secret: dingding
      type: markdown
      message_color: true
      message_pic: true
      sha_link: true
    when:         #设置触发条件
      status: [failure, success]
      brach: [master]
volumes:    #承接上面的volumes
  - name: kube
    host:
      path: /tmp/cache/.kube/.test_kube
  - name: docker
    host:
      path: /var/run/docker.sock
trigger:    #触发器
  branch:
    - master

---
kind: pipeline
type: docker
name: node

steps:
  - name: build
    image: node:latest
    commands:
      - npm install
      - npm test

---
kind: pipeline
name: rust

steps:
  - name: notify
    image: plugins/slack
    settings:
      room: general
      webhook: https://...

depends_on:
  - go
  - node
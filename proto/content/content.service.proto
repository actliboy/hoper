syntax = "proto3";
package content;
import "content/content.model.proto";
import "content/content.enum.proto";
import "content/action.model.proto";
import "user/user.model.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "empty/empty.proto";
import "request/param.proto";
import "response/response.proto";
import "utils/graphql/graphql.proto";
import "oauth/oauth.proto";
import "utils/patch/go.proto";
import "utils/policy/policy.proto";

option java_package = "xyz.hoper.protobuf.content";
option go_package = "github.com/liov/hoper/server/go/mod/protobuf/content";

service ContentService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "内容相关接口"
  };

  // 详情
  rpc TagInfo (request.Object) returns (Tag) {
    option (google.api.http) = {
      get: "/api/v1/content/tag/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Query;
  }

  // 新建
  rpc AddTag (AddTagReq) returns (empty.Empty) {
    option (google.api.http) = {
      post: "/api/v1/content/tag"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Mutation;
  }

  // 修改
  rpc EditTag (EditTagReq) returns (empty.Empty) {
    option (google.api.http) = {
      put: "/api/v1/content/tag/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Mutation;
  }

  // 列表
  rpc TagList (TagListReq) returns (TagListRep) {
    option (google.api.http) = {
      get: "/api/v1/content/tag"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Query;
  }

  // 列表
  rpc TagGroupList (TagGroupListReq) returns (TagGroupListRep) {
    option (google.api.http) = {
      get: "/api/v1/content/tagGroup"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Query;
  }


  // 详情
  rpc AttrInfo (request.Object) returns (Attributes) {
    option (google.api.http) = {
      get: "/api/v1/content/attr/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Query;
  }

  // 新建
  rpc AddAttr (AddAttrReq) returns (request.Object) {
    option (google.api.http) = {
      post: "/api/v1/content/attr"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Mutation;
  }

  // 修改
  rpc EditAttr (EditAttrReq) returns (empty.Empty) {
    option (google.api.http) = {
      put: "/api/v1/content/attr/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Mutation;
  }

  // 列表
  rpc AttrList (AttrListReq) returns (AttrListRep) {
    option (google.api.http) = {
      get: "/api/v1/content/attr"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Query;
  }
  //收藏夹列表
  rpc FavList (FavListReq) returns (FavListRep) {
    option (google.api.http) = {
      get: "/api/v1/content/fav/{userId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Query;
  }
  //收藏夹列表
  rpc TinyFavList (FavListReq) returns (TinyFavListRep) {
    option (google.api.http) = {
      get: "/api/v1/content/tinyFav/{userId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Query;
  }
  // 创建收藏夹
  rpc AddFav (AddFavReq) returns (request.Object) {
    option (google.api.http) = {
      post: "/api/v1/content/fav"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Mutation;
  }
  // 修改收藏夹
  rpc EditFav (AddFavReq) returns (empty.Empty) {
    option (google.api.http) = {
      put: "/api/v1/content/fav/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Mutation;
  }
  // 创建合集
  rpc AddContainer (AddContainerReq) returns (empty.Empty) {
    option (google.api.http) = {
      post: "/api/v1/content/container"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Mutation;
  }
  // 修改合集
  rpc EditDiaryContainer (AddContainerReq) returns (empty.Empty) {
    option (google.api.http) = {
      put: "/api/v1/content/container/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Mutation;
  }
  // 用户内容数量
  rpc UserContentCount (request.Object) returns (user.UserContent) {
    option (google.api.http) = {
      get: "/api/v1/content/count/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Query;
  }

}


message AddTagReq {
  string name = 1[(go.field) = {tags:'annotation:"名称"'}];
  string description = 3 [(go.field) = {tags:'annotation:"描述"'}];
  string expressionURL = 4 [(go.field) = {tags:'annotation:"表情url"'}];
  uint64 userId = 5 [(go.field) = {tags:'annotation:"用户id"'}, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true}];
}

message EditTagReq {
  uint64 id = 1 [(go.field) = {tags:'validate:"required"'}];
  string name = 2[(go.field) = {tags:'annotation:"名称"'}];
  string description = 3 [(go.field) = {tags:'annotation:"描述"'}];
  string expressionURL = 4 [(go.field) = {tags:'annotation:"表情url"'}];
}


message TagListReq{
  string name = 1[(go.field) = {tags:'annotation:"名称"'}];
  TagType type = 2 [(go.field) = {tags:'validate:"required" annotation:"标签类型"'}];
  uint32 pageNo = 3;
  uint32 pageSize = 4;
}

message TagListRep{
  uint32 total = 1;
  repeated Tag list = 2;
}

message TagGroupListReq{
  TagType type = 2 [(go.field) = {tags:'validate:"required" annotation:"标签类型"'}];
  string name = 1[(go.field) = {tags:'annotation:"名称"'}];
  uint32 pageNo = 3;
  uint32 pageSize = 4;
}

message TagGroupListRep{
  int64 total = 1;
  map<int32, TagListRep> data = 2 [js_type = ""];
}

message AddAttrReq {
  AttrType type = 4 [(go.field) = {tags:'annotation:"属性相关类型"'}];
  string name = 1[(go.field) = {tags:'annotation:"名称"'}];
  string description = 2 [(go.field) = {tags:'annotation:"描述"'}];
  string expressionURL = 3 [(go.field) = {tags:'annotation:"表情url"'}];
}

message EditAttrReq {
  uint64 id = 1 [(go.field) = {tags:'validate:"required"'}];
  string name = 2[(go.field) = {tags:'annotation:"名称"'}];
  string description = 3 [(go.field) = {tags:'annotation:"描述"'}];
  string expressionURL = 4 [(go.field) = {tags:'annotation:"表情url"'}];
}

message AttrListReq{
  AttrType type = 2 [(go.field) = {tags:'annotation:"属性相关类型"'}];
  string name = 1[(go.field) = {tags:'annotation:"名称"'}];
}

message AttrListRep{
  int64 total = 1;
  repeated Attributes list = 2;
}

message AddFavReq{
  uint64 id = 1;
  uint64 userId = 17 [(go.field) = {tags:'annotation:"用户id"'}, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true}];
  string title = 3 [(go.field) = {tags:'gorm:"size:10;not null" annotation:"标题"'}];
  string description = 5 [(go.field) = {tags:'gorm:"type:text;not null" annotation:"描述"'}];
  string cover = 4 [(go.field) = {tags:'gorm:"size:255;not null" annotation:"封面"'}];
  uint32 sequence = 12 [(go.field) = {tags:'gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"'}];
  uint32 anonymous = 15 [(go.field) = {tags:'gorm:"type:int2;default:0" annotation:"是否匿名,0-是,1否"'}];
}

message AddContainerReq{
  uint64 id = 1;
  uint64 userId = 17 [(go.field) = {tags:'annotation:"用户id"'}, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true}];
  ContainerType type = 2 [(go.field) = {tags:'gorm:"type:int2;not null" annotation:"类型"'}];
  string title = 3 [(go.field) = {tags:'gorm:"size:10;not null" annotation:"标题"'}];
  string description = 5 [(go.field) = {tags:'gorm:"type:text;not null" annotation:"描述"'}];
  string cover = 4 [(go.field) = {tags:'gorm:"size:255;not null" annotation:"封面"'}];
  uint32 sequence = 12 [(go.field) = {tags:'gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"'}];
  uint32 anonymous = 15 [(go.field) = {tags:'gorm:"type:int2;default:0" annotation:"是否匿名,0-是,1否"'}];
}

message FavListReq{
  uint32 userId  = 1 [(go.field) = {tags:'annotation:"权限,0-自己可写的，1-可读写"'}];
}

message FavListRep{
  int64 total = 1;
  repeated Favorites list = 2;
}

message TinyFavListRep{
  int64 total = 1;
  repeated TinyFavorites list = 2;
}

message TinyFavorites{
  uint64 id = 1 [(go.field) = {tags:'gorm:"primaryKey"'}];
  string title = 3 [(go.field) = {tags:'gorm:"size:10;not null" annotation:"标题"'}];
}

message ContentReq{
  ContentType type = 12 [(go.field) = {tags:'gorm:"type:int2;not null" validate:"required" annotation:"相关类型"'}];
  uint64 refId = 6 [(go.field) = {tags:'gorm:"size:20;not null;index" validate:"required" annotation:"相关id"'}];
}
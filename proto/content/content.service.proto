syntax = "proto3";
package content;
import "content/content.model.proto";
import "content/content.enum.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "utils/request/empty.proto";
import "utils/request/param.proto";
import "utils/response/response.proto";
import "utils/proto/gogo/graphql.proto";
import "utils/oauth/oauth.proto";
import "utils/proto/go/go.proto";
import "utils/proto/go/policy.proto";

option java_package = "xyz.hoper.protobuf.content";
option go_package = "github.com/liov/hoper/go/v2/protobuf/content";
option (go.file) = {non_omitempty:true};

service ContentService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "内容相关接口"
  };

  // 详情
  rpc TagInfo (GetTagReq) returns (Tag) {
    option (google.api.http) = {
      get: "/api/v1/tag/id/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (gogo.graphql_operation) = Query;
  }

  // 新建
  rpc AddTag (AddTagReq) returns (request.Empty) {
    option (google.api.http) = {
      post: "/api/v1/tag"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (gogo.graphql_operation) = Mutation;
  }

  // 修改
  rpc EditTag (EditTagReq) returns (request.Empty) {
    option (google.api.http) = {
      put: "/api/v1/tag"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (gogo.graphql_operation) = Mutation;
  }

  // 列表
  rpc TagList (TagListReq) returns (TagListRep) {
    option (google.api.http) = {
      get: "/api/v1/tag"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (gogo.graphql_operation) = Query;
  }

  // 列表
  rpc TagGroupList (TagGroupListReq) returns (TagGroupListRep) {
    option (google.api.http) = {
      get: "/api/v1/tag"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (gogo.graphql_operation) = Query;
  }


  // 详情
  rpc AttrInfo (GetAttrReq) returns (Attributes) {
    option (google.api.http) = {
      get: "/api/v1/attr/id/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (gogo.graphql_operation) = Query;
  }

  // 新建
  rpc AddAttr (AddAttrReq) returns (request.Empty) {
    option (google.api.http) = {
      post: "/api/v1/attr"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (gogo.graphql_operation) = Mutation;
  }

  // 修改
  rpc EditAttr (EditAttrReq) returns (request.Empty) {
    option (google.api.http) = {
      put: "/api/v1/attr"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (gogo.graphql_operation) = Mutation;
  }

  // 列表
  rpc AttrList (AttrListReq) returns (AttrListRep) {
    option (google.api.http) = {
      get: "/api/v1/attr"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (gogo.graphql_operation) = Query;
  }

}

message GetTagReq {
  uint64 id = 1 [(go.field) = {tags:'validate:"required"'}];
}

message AddTagReq {
  string name = 1[(go.field) = {tags:'annotation:"名称"'}];
  string description = 3 [(go.field) = {tags:'gorm:"annotation:"描述"'}];
  string expressionURL = 4 [(go.field) = {tags:'annotation:"表情url"'}];
  uint64 userId = 5 [(go.field) = {tags:'annotation:"用户id"'},(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true}];
}

message EditTagReq {
  uint64 id = 1 [(go.field) = {tags:'validate:"required"'}];
  string name = 2[(go.field) = {tags:'annotation:"名称"'}];
  string description = 3 [(go.field) = {tags:'annotation:"描述"'}];
  string expressionURL = 4 [(go.field) = {tags:'annotation:"表情url"'}];
}


message TagListReq{
  string name = 1[(go.field) = {tags:'annotation:"名称"'}];
  TagType type = 2 [(go.field) = {tags:'validate:"required" annotation:"标签类型"'}];
  uint32 pageNo = 3;
  uint32 pageSize = 4;
}

message TagListRep{
  uint32 total = 1;
  repeated Tag list = 2;
}

message TagGroupListReq{
  TagType type = 2 [(go.field) = {tags:'validate:"required" annotation:"标签类型"'}];
  string name = 1[(go.field) = {tags:'annotation:"名称"'}];
  uint32 pageNo = 3;
  uint32 pageSize = 4;
}

message TagGroupListRep{
  uint32 total = 1;
  map<int32,TagListRep> data = 2;
}

message GetAttrReq {
  uint64 id = 1 [(go.field) = {tags:'validate:"required"'}];
}

message AddAttrReq {
  AttrType type = 4 [(go.field) = {tags:'annotation:"属性相关类型"'}];
  string name = 1[(go.field) = {tags:'annotation:"名称"'}];
  string description = 2 [(go.field) = {tags:'annotation:"描述"'}];
  string expressionURL = 3 [(go.field) = {tags:'annotation:"表情url"'}];
}

message EditAttrReq {
  uint64 id = 1 [(go.field) = {tags:'validate:"required"'}];
  string name = 2[(go.field) = {tags:'annotation:"名称"'}];
  string description = 3 [(go.field) = {tags:'annotation:"描述"'}];
  string expressionURL = 4 [(go.field) = {tags:'annotation:"表情url"'}];
}

message AttrListReq{
  AttrType type = 2 [(go.field) = {tags:'annotation:"属性相关类型"'}];
  string name = 1[(go.field) = {tags:'annotation:"名称"'}];
}

message AttrListRep{
  uint32 count = 1;
  repeated Attributes list = 2;
}
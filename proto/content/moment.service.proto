syntax = "proto3";
package content;
import "content/content.enum.proto";
import "content/content.model.proto";
import "common/common.model.proto";
import "user/user.model.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "utils/empty/empty.proto";
import "utils/response/response.proto";
import "utils/request/param.proto";
import "utils/proto/gogo/graphql.proto";
import "utils/oauth/oauth.proto";
import "utils/proto/go/go.proto";

option java_package = "xyz.hoper.protobuf.content";
option go_package = "github.com/liov/hoper/go/v2/protobuf/content";
option (go.file) = {non_omitempty:true};

service MomentService {

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "瞬间相关接口"
  };

  // 详情
  rpc Info (request.Object) returns (Moment) {
    option (google.api.http) = {
      get: "/api/v1/moment/id/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (gogo.graphql_operation) = Query;
  }

  // 新建
  rpc Add (AddMomentReq) returns (empty.Empty) {
    option (google.api.http) = {
      post: "/api/v1/moment"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (gogo.graphql_operation) = Mutation;
  }

  // 修改
  rpc Edit (AddMomentReq) returns (empty.Empty) {
    option (google.api.http) = {
      put: "/api/v1/moment"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (gogo.graphql_operation) = Mutation;
  }

  // 修改
  rpc List (MomentListReq) returns (MomentListRep) {
    option (google.api.http) = {
      get: "/api/v1/moment"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (gogo.graphql_operation) = Query;
  }

  // 删除
  rpc Delete (request.Object) returns (empty.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/moment"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (gogo.graphql_operation) = Mutation;
  }
}

// 新增瞬间
message AddMomentReq {
  uint64 id = 1 [(go.field) = {tags:'gorm:"primaryKey"'}];
  string content = 2 [(go.field) = {tags:'annotation:"内容"'}];
  uint64 bookId = 4 [(go.field) = {tags:'annotation:"日记本Id"'}];
  MomentType type = 3[(go.field) = {tags:'annotation:"瞬间类型"'}];
  string mood = 5 [(go.field) = {tags:'gorm:"-" annotation:"心情"'}];
  string weather = 7 [(go.field) = {tags:'gorm:"-" annotation:"心情"'}];
  uint64 areaId = 10 [(go.field) = {tags:'annotation:"地区"'}];
  uint32 areaVisibility = 11 [(go.field) = {tags:'annotation:"地区可见性，1-可见"'}];
  string location = 12 [(go.field) = {tags:'annotation:"位置"'}];
  repeated string tags = 13 [(go.field) = {tags:'gorm:"-" annotation:"标签"'}];
  string images = 14 [(go.field) = {tags:'annotation:"图片"'}];
  uint64 userId = 17 [(go.field) = {tags:'annotation:"用户id"'}, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true}];
  uint32 sequence = 19 [(go.field) = {tags:'annotation:"同级别的分类可根据sequence的值来排序，置顶"'}];
  uint32 anonymous = 20 [(go.field) = {tags:'annotation:"是否匿名,0-是,1否"'}];
  ViewPermission permission = 21 [(go.field) = {tags:'annotation:"查看权限"'}];
}

message MomentListReq{
  uint32 pageNo = 1;
  uint32 pageSize = 2;
}

message MomentListRep{
  int64 total = 1;
  repeated Moment list = 2;
  repeated user.UserBaseInfo users = 3;
}
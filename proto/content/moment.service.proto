syntax = "proto3";
package content;

import "content/content.model.proto";
import "common/common.model.proto";
import "content/action.model.proto";
import "content/moment.model.proto";
import "user/user.model.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "hopeio/utils/validator/validator.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "hopeio/request/param.proto";
import "danielvladco/protobuf/graphql.proto";
import "hopeio/oauth/oauth.proto";
import "hopeio/utils/patch/go.proto";
import "hopeio/time/time.proto";

option java_package = "xyz.hoper.protobuf.content";
option java_multiple_files = true;
option go_package = "github.com/liov/hoper/server/go/protobuf/content";

service MomentService {

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "瞬间相关接口"
  };

  // 详情
  rpc Info (request.Id) returns (Moment) {
    option (google.api.http) = {
      get: "/api/v1/moment/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: QUERY};
  }

  // 新建
  rpc Add (AddMomentReq) returns (request.Id) {
    option (google.api.http) = {
      post: "/api/v1/moment"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
  }

  // 修改
  rpc Edit (AddMomentReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/v1/moment/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
  }

  // 列表
  rpc List (MomentListReq) returns (MomentListRep) {
    option (google.api.http) = {
      get: "/api/v1/moment"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: QUERY};
  }

  // 删除
  rpc Delete (request.Id) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/moment/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
  }
}

// 新增瞬间
message AddMomentReq {
  uint64 id = 1 [(go.field) = {tags:'gorm:"primaryKey" json:"-"'}];
  string content = 2 [(go.field) = {tags:'comment:"内容"'}];
  common.MediaType type = 3[(go.field) = {tags:'comment:"瞬间类型"'}];
  string mood = 5 [(go.field) = {tags:'gorm:"-" comment:"心情"'}];
  string weather = 7 [(go.field) = {tags:'gorm:"-" comment:"天气"'}];
  uint64 areaId = 10 [(go.field) = {tags:'comment:"地区"'}];
  //uint32 areaVisibility = 11 [(go.field) = {tags:'comment:"地区可见性，1-可见"'}];
  string location = 12 [(go.field) = {tags:'comment:"位置"'}];
  repeated string tags = 13 [(go.field) = {tags:'gorm:"-" comment:"标签"'}];
  repeated string images = 14 [(go.field) = {tags:'comment:"图片"'}];
  uint64 userId = 17 [(go.field) = {tags:'comment:"用户id"'}, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true}];
  uint32 sequence = 19 [(go.field) = {tags:'comment:"同级别的分类可根据sequence的值来排序，置顶"'}];
  uint32 anonymous = 20 [(go.field) = {tags:'comment:"是否匿名,0-否,1是"'}];
  ViewPermission permission = 21 [(go.field) = {tags:'comment:"查看权限"'}];
}

message MomentListReq{
  uint32 pageNo = 1;
  uint32 pageSize = 2;
}

message MomentListRep{
  int64 total = 1;
  repeated Moment list = 2;
  repeated user.UserBase users = 3;
}

syntax = "proto3";
package content;
import "content/content.model.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "cherry/protobuf/utils/validator/validator.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "cherry/protobuf/response/response.proto";
import "cherry/protobuf/request/param.proto";
import "cherry/protobuf/utils/patch/go.proto";
import "danielvladco/protobuf/graphql.proto";

option go_package = "github.com/liov/hoper/server/go/protobuf/content";
option java_package = "xyz.hoper.protobuf.content";
option java_multiple_files = true;

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0"
  }
};

service TestService {

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
		description: "测试相关接口"
    };


    rpc GC(GCReq) returns(google.protobuf.Empty){
        option (google.api.http) = {
            get: "/api/v1/gc/{address}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags:["测试相关接口","v1.0.0","test"]
            summary : "测试接口"
            description : "根据地址取值测试该值是否被回收"
        };
        option (danielvladco.protobuf.graphql.rpc) = {type: QUERY};
    }

    rpc Register(google.protobuf.Empty) returns(google.protobuf.Empty){
        option (google.api.http) = {
            get: "/api/v1/register"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags:["测试相关接口","v1.0.0","test"]
            summary : "服务注册"
            description : "服务注册测试接口"
        };
        option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
    }

    rpc Restart(google.protobuf.Empty) returns(google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/v1/restart"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags:["测试相关接口","v1.0.0","test"]
            summary : "重启"
            description : "重启测试接口"
        };
        option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
    }

    rpc Array(Ids) returns(google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/array"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags:["测试相关接口","v1.0.0","test"]
            summary : "数组参数测试"
            description : "数组参数测试接口"
        };
        option (danielvladco.protobuf.graphql.rpc) = {type: QUERY};
    }

}

message GCReq {
    int64 address = 1;
}

message Ids {
    repeated uint64 Ids = 1;
}

message OneOf{
    oneof Req{
        string name =1;
        uint64 id = 2;
    }
}
syntax = "proto3";
package content;
import "content/content.enum.proto";
import "content/content.model.proto";
import "common/common.model.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "empty/empty.proto";
import "response/response.proto";
import "request/param.proto";
import "utils/graphql/graphql.proto";
import "oauth/oauth.proto";
import "utils/patch/go.proto";

option java_package = "xyz.hoper.protobuf.content";
option go_package = "github.com/actliboy/hoper/server/go/mod/protobuf/content";

service DiaryService {

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "日记相关接口"
  };

  // 日记本
  rpc DiaryBook (DiaryBookReq) returns (DiaryBookRep) {
    option (google.api.http) = {
      get: "/api/v1/diaryBook/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Query;
  }
  // 日记本列表
  rpc DiaryBookList (DiaryBookListReq) returns (DiaryBookListRep) {
    option (google.api.http) = {
      get: "/api/v1/diaryBook"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Query;
  }
  // 创建日记本
  rpc AddDiaryBook (AddDiaryBookReq) returns (request.Object) {
    option (google.api.http) = {
      post: "/api/v1/diaryBook"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Mutation;
  }
  // 修改日记本
  rpc EditDiaryBook (AddDiaryBookReq) returns (empty.Empty) {
    option (google.api.http) = {
      put: "/api/v1/diaryBook/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Mutation;
  }

  // 详情
  rpc Info (request.Object) returns (Diary) {
    option (google.api.http) = {
      get: "/api/v1/diary/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Query;
  }

  // 新建
  rpc Add (AddDiaryReq) returns (request.Object) {
    option (google.api.http) = {
      post: "/api/v1/diary"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Mutation;
  }

  // 修改
  rpc Edit (AddDiaryReq) returns (empty.Empty) {
    option (google.api.http) = {
      put: "/api/v1/diary/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Mutation;
  }

  // 列表
  rpc List (DiaryListReq) returns (DiaryListRep) {
    option (google.api.http) = {
      get: "/api/v1/diary"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Query;
  }

  // 删除
  rpc Delete (request.Object) returns (empty.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/diary/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["v1.0.0"]
    };
    option (graphql.graphql_operation) = Mutation;
  }
}

message DiaryBookListReq{
}

message DiaryBookListRep{
  uint32 count = 1;
  repeated DiaryBook list = 2;
}

message DiaryBookReq{
  uint64 id = 1 [(go.field) = {tags:'validate:"required"'}];
  uint32 pageNo = 2;
  uint32 pageSize = 3;
}

message DiaryBookRep{
  DiaryBook book = 1;
  repeated Diary list = 2;
}

message AddDiaryBookReq{
  uint64 id = 1 [(go.field) = {tags:'validate:"required"'}];
  uint64 userId = 17 [(go.field) = {tags:'annotation:"用户id"'}, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true}];
  string title = 3 [(go.field) = {tags:'gorm:"size:10;not null" annotation:"标题"'}];
  string description = 5 [(go.field) = {tags:'gorm:"type:text;not null" annotation:"描述"'}];
  string cover = 4 [(go.field) = {tags:'gorm:"size:255;not null" annotation:"封面"'}];
  uint32 sequence = 12 [(go.field) = {tags:'gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"'}];
  uint32 anonymous = 15 [(go.field) = {tags:'gorm:"type:int2;default:0" annotation:"是否匿名,0-是,1否"'}];
}


message AddDiaryReq{
  uint64 id = 1 [(go.field) = {tags:'validate:"required"'}];
  string content = 2 [(go.field) = {tags:'annotation:"内容"'}];
  uint64 bookId = 4 [(go.field) = {tags:'annotation:"日记本Id"'}];
  string mood = 5 [(go.field) = {tags:'gorm:"-" annotation:"心情"'}];
  string weather = 7 [(go.field) = {tags:'gorm:"-" annotation:"心情"'}];
  uint64 areaId = 10 [(go.field) = {tags:'annotation:"地区"'}];
  uint32 areaVisibility = 11 [(go.field) = {tags:'annotation:"地区可见性，1-可见"'}];
  string location = 12 [(go.field) = {tags:'annotation:"位置"'}];
  repeated string tags = 13 [(go.field) = {tags:'gorm:"-" annotation:"标签"'}];
  uint64 userId = 17 [(go.field) = {tags:'annotation:"用户id"'}, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true}];
  uint32 sequence = 19 [(go.field) = {tags:'annotation:"同级别的分类可根据sequence的值来排序，置顶"'}];
  uint32 anonymous = 20 [(go.field) = {tags:'annotation:"是否匿名,0-是,1否"'}];
  ViewPermission permission = 21 [(go.field) = {tags:'annotation:"查看权限"'}];
}


message DiaryListReq{
  uint32 pageNo = 1;
  uint32 pageSize = 2;
}

message DiaryListRep{
  int64 total = 1;
  repeated Diary list = 2;
}
syntax = "proto3";
package user;
import "cherry/protobuf/utils/enum/enum.proto";
import "cherry/protobuf/utils/patch/go.proto";

option (enum.enum_gqlgen_all) = true;
// 写在这里必然要暴露出去
option java_package = "xyz.hoper.protobuf.user";
option go_package = "github.com/liov/hoper/server/go/protobuf/user";


option (go.file) = {no_enum_prefix:true};

// 用户操作
enum Action {
    option (go.enum) = {stringer_name: 'OrigString'};
    ActionPlaceholder = 0 [(enum.enumvalue_cn)= "占位"];
    ActionSignup = 1 [(enum.enumvalue_cn)= "注册"];
    ActionActive = 2 [(enum.enumvalue_cn)= "激活"];
    ActionRestPassword = 3 [(enum.enumvalue_cn)= "重置密码"];
    ActionEditPassword = 4 [(enum.enumvalue_cn)= "修改密码"];
    ActionCreateResume = 5 [(enum.enumvalue_cn)= "新建简历"];
    ActionEditResume = 6 [(enum.enumvalue_cn)= "编辑简历"];
    ActionDELETEResume = 7 [(enum.enumvalue_cn)= "删除简历"];
}
// 用户角色
enum Role {
    option (go.enum) = {stringer_name: 'OrigString'};
    PlaceholderRole = 0 [(enum.enumvalue_cn)= "占位"];
    RoleNormal = 1 [(enum.enumvalue_cn)= "普通用户"];
    RoleAdmin = 2 [(enum.enumvalue_cn)= "管理员"];
    RoleSuperAdmin = 3 [(enum.enumvalue_cn)= "超级管理员"];
}

// 用户性别
enum Gender{
    option (go.enum) = {stringer_name: 'OrigString'};
    GenderPlaceholder = 0 [(enum.enumvalue_cn)= "占位"];
    GenderUnfilled = 1 [(enum.enumvalue_cn)= "未填"];
    GenderMale = 2 [(enum.enumvalue_cn)= "男"];
    GenderFemale = 3 [(enum.enumvalue_cn)= "女"];
}

// 用户状态
enum UserStatus {
    option (go.enum) = {stringer_name: 'OrigString'};
    option (enum.enum_jsonmarshal) = false;
    UserStatusPlaceholder = 0 [(enum.enumvalue_cn)= "占位"];
    UserStatusInActive = 1 [(enum.enumvalue_cn)= "未激活"];
    UserStatusActivated = 2 [(enum.enumvalue_cn)= "已激活"];
    UserStatusFrozen = 3 [(enum.enumvalue_cn)= "已冻结"];
    UserStatusDeleted = 4 [(enum.enumvalue_cn)= "已注销"];
}

// 封禁类型
enum BannedType{
    option (go.enum) = {stringer_name: 'OrigString'};
    option (enum.enum_jsonmarshal) = false;
    BannedTypePlaceholder = 0 [(enum.enumvalue_cn)= "占位"];
    BannedTypePost = 1 [(enum.enumvalue_cn)= "禁言"];
    BannedTypeLogin = 2 [(enum.enumvalue_cn)= "禁止登录"];
}

enum UserErr {
    option (go.enum) = {stringer_name: 'OrigString'};
    option (enum.enum_errorcode) = true;
    option (enum.enum_jsonmarshal) = false;
    UserErrPlaceholder = 0 [(enum.enumvalue_cn)= "占位"];
    UserErrLogin = 1000 [(enum.enumvalue_cn)= "用户名或密码错误"];
    UserErrNoActive = 1001 [(enum.enumvalue_cn)= "未激活账号"];
    UserErrNoAuthority = 1002 [(enum.enumvalue_cn)= "无权限"];
    UserErrLoginTimeout = 1003 [(enum.enumvalue_cn)= "登录超时"];
    UserErrInvalidToken = 1004 [(enum.enumvalue_cn)= "Token错误"];
    UserErrNoLogin = 1005 [(enum.enumvalue_cn)= "未登录"];
}
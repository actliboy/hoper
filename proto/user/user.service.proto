syntax = "proto3";
package user;
import "user/user.model.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "hopeio/utils/validator/validator.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "hopeio/time/time.proto";
import "hopeio/response/response.proto";
import "hopeio/request/param.proto";
import "danielvladco/protobuf/graphql.proto";
import "hopeio/oauth/oauth.proto";
import "hopeio/utils/patch/go.proto";
import "google/protobuf/wrappers.proto";

option java_package = "xyz.hoper.protobuf.user";
option java_multiple_files = true;
option go_package = "github.com/liov/hoper/server/go/protobuf/user";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0"
  }
};

service UserService {

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "用户相关接口"
  };
  // 验证码
  rpc VerifyCode (VerifyCodeReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/api/v1/sendVerifyCode"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "util", "v1.0.0"]
      summary : "发送验证码"
      description : "发送验证码"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: QUERY};
  }

  //注册验证
  rpc SignupVerify (SingUpVerifyReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/user/signupVerify"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "发送验证码"
      description : "发送验证码"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
  }

  //注册
  rpc Signup (SignupReq) returns (google.protobuf.StringValue) {
    option (google.api.http) = {
      post: "/api/v1/user"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "注册"
      description : "注册接口"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
  }

  //注册
  rpc EasySignup (SignupReq) returns (LoginRep) {
    option (google.api.http) = {
      post: "/api/v2/user"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "简单注册"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
  }

  //激活
  rpc Active (ActiveReq) returns (LoginRep) {
    option (google.api.http) = {
      get: "/api/v1/user/active/{id}/{secret}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "激活"
      description : "激活接口"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
  }
  //编辑
  rpc Edit (EditReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/v1/user/{id}"
      body: "detail"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "编辑"
      description : "编辑接口"
      security: {
        security_requirement: {
          key: "Authorization"
          value: {
            scope: "read"
          }
        }
      }
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
  }
  //登录
  rpc Login (LoginReq) returns (LoginRep) {
    option (google.api.http) = {
      post: "/api/v1/user/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "登录"
      description : "登录接口"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: QUERY};
  }
  //退出
  rpc Logout (google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/api/v1/user/logout"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "退出"
      description : "退出接口"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: QUERY};
  }

  //鉴权
  rpc AuthInfo (google.protobuf.Empty) returns (Auth) {
    option (google.api.http) = {
      get: "/api/v1/auth"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "获取用户信息"
      description : "获取用户信息接口"
      security: {
        security_requirement: {
          key: "OAuth2"
          value: {
            scope: "read"
          }
        }
        security_requirement: {
          key: "Authorization"
          value: {
            scope: ["read", "write"]
          }
        }
      }
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: QUERY};
  }

  //重置密码
  rpc ForgetPassword (LoginReq) returns (google.protobuf.StringValue) {
    option (google.api.http) = {
      get: "/api/v1/user/forgetPassword"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "忘记密码"
      description : "忘记密码接口"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
  }

  rpc ResetPassword (ResetPasswordReq) returns (google.protobuf.StringValue) {
    option (google.api.http) = {
      patch: "/api/v1/user/resetPassword/{id}/{secret}"
      body: "password"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "重置密码"
      description : "重置密码接口"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
  }

  //获取用户信息
  rpc Info (request.Id) returns (UserRep) {
    option (google.api.http) = {
      get: "/api/v1/user/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "获取用户信息"
      description : "根据Id获取用户信息接口"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: QUERY};
  }

  rpc ActionLogList (ActionLogListReq) returns (ActionLogListRep) {
    option (google.api.http) = {
      get: "/api/v1/user/actionLog"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "操作日志"
      description : "操作日志接口"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
  }

  //获取基础用户信息
  rpc BaseList (BaseListReq) returns (BaseListRep) {
    option (google.api.http) = {
      post: "/api/v1/baseUserList"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "获取用户信息"
      description : "根据Id获取用户信息接口"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: QUERY};
  }

  // 关注
  rpc Follow (FollowReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/api/v1/user/follow"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "关注"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
  }
  // 取消关注
  rpc delFollow (FollowReq) returns (BaseListRep) {
    option (google.api.http) = {
      delete: "/api/v1/user/follow"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0"]
      summary : "取消关注"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
  }
}

service OauthService{
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "Oauth相关接口"
  };
  rpc OauthAuthorize (oauth.OauthReq) returns (response.HttpResponse) {
    option (google.api.http) = {
      get: "/oauth/authorize"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0", "oauth"]
      summary : "oauth验证"
      description : "oauth验证"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: QUERY};
  }

  rpc OauthToken (oauth.OauthReq) returns (response.HttpResponse) {
    option (google.api.http) = {
      post: "/oauth/access_token"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags:["用户相关接口", "v1.0.0", "oauth"]
      summary : "签发token"
      description : "签发token"
    };
    option (danielvladco.protobuf.graphql.rpc) = {type: QUERY};
  }
}

// 注册验证请求
message SingUpVerifyReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "注册验证请求"  // 和message前注释一样的效果
    }
    example: '{"mail":"123@qq.com", "phone":"12345678901"}'
  };
  // 邮箱
  string mail = 6 [(go.field) = {tags:'validate:"omitempty,email" comment:"邮箱"'}];
  // 手机号
  string phone = 7 [(go.field) = {tags:'validate:"omitempty,phone" comment:"手机号"'}];
}

message SignupReq {
  // 密码
  string password = 4 [(go.field) = {tags:'validate:"required,gte=6,lte=15" comment:"密码"'},
    (validator.field) = {length_gt: 5,custom_error: "密码最短6位"},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {title: "密码",min_length: 6}];
  string name = 1 [(go.field) = {tags:'validate:"required,gte=3,lte=10" comment:"昵称"'}];
  Gender gender = 3 [(go.field) = {tags:'validate:"required" comment:"性别"'}];
  // 邮箱
  string mail = 6 [(go.field) = {tags:'validate:"omitempty,email" comment:"邮箱"'}];
  // 手机号
  string phone = 7 [(go.field) = {tags:'validate:"omitempty,phone" comment:"手机号"'}];
  // 验证码
  string vCode = 8 [(go.field) = {tags:'validate:"required" comment:"验证码"'}];
}

message ActiveReq {
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title:"ID"
    type: INTEGER}];
  string secret = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title:"密钥"}];
}


message EditReq {
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title:"ID"
    type: INTEGER}];
  EditDetail detail = 2 [(go.field) = {tags:'gorm:"embedded"'}];
  message EditDetail {
    string name = 2 [(go.field) = {tags:'validate:"gte=3,lte=10" comment:"名字"'}];
    // 性别，0未填写，1男，2女
    Gender gender = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      type:INTEGER
    }];
    string birthday = 9;
    string address = 14;
    string intro = 10;
    string signature = 11;
    string avatarUrl = 12;
    string coverUrl = 13;
    repeated Resume eduExps = 15 [(go.field) = {tags:'gorm:"-"'}];
    repeated Resume workExps = 16 [(go.field) = {tags:'gorm:"-"'}];
  }
}
// 登录请求
message LoginReq {
  string input = 1;
  string password = 2 [(go.field) = {tags:'validate:"required,gt=5,lt=15" comment:"密码"'},(validator.field) = {
    length_gt: 5
    custom_error: "密码错误"
  }];
  string vCode = 3;
}
// 登录返回
message LoginRep {
  User user = 1;
  string token = 2;
}


// 重置密码请求
message ResetPasswordReq {
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title:"ID"
    type: INTEGER}];
  string secret = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title:"密钥"}];
  string password = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title:"密码"}];
}

message ActionLogListReq {
  time.Time beginTime = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    type: STRING}];
  time.Time endTime = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    type: STRING}];
}

message ActionLogListRep {
  uint32 count = 1;
  repeated ActionLog list = 2;
}

message VerifyCodeReq{
  // 邮箱
  string mail = 6 [(go.field) = {tags:'validate:"omitempty,email" comment:"邮箱"'}];
  // 手机号
  string phone = 7 [(go.field) = {tags:'validate:"omitempty,phone" comment:"手机号"'}];
  Action action = 2 [(go.field) = {tags:'comment:"操作类型"'}];
  // 验证码
  string vCode = 8 [(go.field) = {tags:'validate:"required" comment:"验证码"'}];
}

message BaseListReq{
  repeated uint64 ids = 1;
  uint32  pageNo = 2;
  uint32 pageSize = 3;
}

message BaseListRep{
  int64 total = 1;
  repeated UserBase list = 2;
}

message UserRep{
  User user = 1;
  UserExt uerExt = 2;
}

message FollowReq{
  uint64 id = 1;
}


